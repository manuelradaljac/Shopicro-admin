generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Store {
  id         String     @id @default(uuid())
  name       String
  userId     String
  Heroes     Hero[]     @relation("StoreToHero")
  categories Category[] @relation("StoreToCategory")
  sizes      Size[]     @relation("StoreToSize")
  colors     Color[]    @relation("StoreToColor")
  product    Product[]  @relation("StoreToProduct")
  order      Order[]    @relation("StoreToOrder")
  brand      Brand[]    @relation("StoreToBrand")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Hero {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToHero", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Category {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  heroId    String
  hero      Hero      @relation(fields: [heroId], references: [id])
  name      String
  products  Product[] @relation("CategoryToProduct")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  products  Product[]
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  products  Product[]
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// TODO NAPRAVIT BRAND STRANICU U SHOPU I DODAT SVE KO NA ZALANDU ABT YOU ITD.
model Brand {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToBrand", fields: [storeId], references: [id])
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name       String
  price      Decimal
  images     Image[]
  orderItems OrderItem[]
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String
  size       Size        @relation(fields: [sizeId], references: [id])
  colorId    String
  color      Color       @relation(fields: [colorId], references: [id])
  brandId    String
  brand      Brand       @relation(fields: [brandId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String?
  Order     Order?  @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
}
