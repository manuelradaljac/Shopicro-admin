generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Store {
  id            String          @id @default(uuid())
  name          String
  userId        String
  Heroes        Hero[]          @relation("StoreToHero")
  categories    Category[]      @relation("StoreToCategory")
  sizes         Size[]          @relation("StoreToSize")
  colors        Color[]         @relation("StoreToColor")
  product       Product[]       @relation("StoreToProduct")
  order         Order[]         @relation("StoreToOrder")
  inventory     Inventory[]     @relation("StoreToInventory")
  storeSettings StoreSettings[] @relation("StoreToStoreSettings")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model StoreSettings {
  id      String @id @default(uuid())
  storeId String
  store   Store  @relation("StoreToStoreSettings", fields: [storeId], references: [id])
  logo    String
}

model Hero {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToHero", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  textColor  String     @default("#fff")
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Category {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  heroId    String
  hero      Hero      @relation(fields: [heroId], references: [id])
  name      String
  slug      String    @unique @default("")
  products  Product[] @relation("CategoryToProduct")
  sizes     Size[]    @relation("SizeToCategory")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Size {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToSize", fields: [storeId], references: [id])
  products   Product[]
  categories Category[] @relation("SizeToCategory")
  name       String
  slug       String     @unique @default("")
  value      String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  products  Product[]
  name      String
  slug      String    @unique @default("")
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  categorySlug String @default("")
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name       String
  slug       String      @unique @default("")
  price      Decimal
  images     Image[]
  orderItems OrderItem[]
  Inventory  Inventory[] @relation("InventoryToProduct")
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String
  size       Size        @relation(fields: [sizeId], references: [id])
  colorId    String
  color      Color       @relation(fields: [colorId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String?
  Order     Order?  @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Inventory {
  id            String   @id @default(uuid())
  storeId       String
  store         Store    @relation("StoreToInventory", fields: [storeId], references: [id])
  Product       Product  @relation("InventoryToProduct", fields: [productId], references: [id])
  productId     String   @unique
  numberInStock Int      @default(1)
  isInStock     Boolean  @default(true)
  updatedAt     DateTime @updatedAt
}
